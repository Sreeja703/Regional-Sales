# -*- coding: utf-8 -*-
"""Regsales analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GEdwaLBpNFSmwP7wyU-s5nPPAzZsC-Cq

#### **Problem Statement**

ABC Co's 2014-2018 sales data to identify key revenue and profit drivers across products, channels and regions, uncover seasonal trends and outlines and align performance against budgets. Use these insights to optimize pricing, promotions and market expansion for sustainable growth and reduced concentration risk.
"""

from ast import increment_lineno
# Importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sheets = pd.read_excel('/content/Regional Sales Dataset.xlsx', sheet_name = None)

# Assign dataframes to each sheet

df_sales = sheets['Sales Orders']
df_customers = sheets['Customers']
df_products = sheets['Products']
df_regions = sheets['Regions']
df_state_reg = sheets['State Regions']
df_budgets = sheets['2017 Budgets']

df_sales.shape

print("df_sales shape: " , (df_sales.shape))
print("df_customers shape: " , (df_sales.shape))
print("df_products shape: " , (df_products.shape))
print("df_regions shape: " , (df_regions.shape))
print("df_ state_reg shape: " , (df_state_reg.shape))
print("df_budgets shape: " , (df_budgets.shape))

df_customers.head(5)

df_sales.head(5)

df_regions.head(5)

df_state_reg.head(5)

new_header = df_state_reg.iloc[0]
df_state_reg.columns = new_header
df_state_reg = df_state_reg[1:].reset_index(drop=True)

df_state_reg.head(5)

df_products.head(5)

df_budgets.head(5)

df_sales.isnull().sum()

df_products.isnull().sum()

df_regions.isnull().sum()

df_state_reg.isnull().sum()

df_budgets.isnull().sum()

"""#### **Data Cleaning**

"""

# Merge with customers
df = df_sales.merge(
    df_customers,
    how='left',
    left_on='Customer Name Index',
    right_on='Customer Index'
)

df.head(5)

# Merge with products
df = df.merge(
    df_products,
    how='left',
    left_on='Product Description Index',
    right_on='Index'
)

df.head(5)

# Merge with regions
df = df.merge(
    df_regions,
    how='left',
    left_on='Delivery Region Index',
    right_on='id'
)

df.head(5)

# Merging with State Regions

df = df.merge(
    df_state_reg[["State Code", "Region"]],
    how='left',
    left_on='state_code',
    right_on='State Code'
)

df.head(5)

# Merging with Budgets

df = df.merge(
    df_budgets,
    how='left',
    on='Product Name'
)

df.to_csv('file.csv')

#Customer Index
#Index
#id
#State Code

# Clean up redundant columns
cols_to_drop = ['Customer Index', 'Index', 'id', 'State Code']
df = df.drop(columns = cols_to_drop, errors='ignore')

df.head(5)

# Convert all columns to lower case for consistency and easier access
df.columns = df.columns.str.lower()

df.columns.values

# KEEP THE IMPROTANT COLUMNS AND DELETE THE COLUMNS THAT WE DON'T NEED

cols_to_keep = [
    'ordernumber',
    'orderdate',
    'customer names',
    'channel',
    'product name',
    'order quantity',
    'unit price',
    'line total',
    'total unit cost',
    'state_code',
    'county',
    'state',
    'region',
    'latitude',
    'longitude',
    '2017 budgets'
]

df.head(1)

# Rename the columns

df = df.rename(columns={
    'ordernumber': 'order_number',
    'orderdate': 'order_date',
    'customer names': 'customer_name',
    'product name': 'product_name',
    'order quantity': 'order_quantity',
    'unit price': 'unit_price',
    'line total': 'revenue',
    'total_unit_cost': 'cost',
    'state_code': 'state',
    'state': 'state_name',
    'latitude': 'lat',
    'longiyude': 'lon',
    '2017 budgets': 'budget'
})

df.head(1)

# Blank out budgets for non-2017 orders
df.loc[df['order_date'].dt.year !=2017, 'budget'] = pd.NA

# line total is revenue
df[['order_date','product_name', 'revenue', 'budget']].head(5)

# line total is revenue
df[['order_date','product_name', 'revenue', 'budget']].tail(5)

df.info()

## Filter the dataset to include only records from year 2017
df_2017 = df[df['order_date'].dt.year == 2017]

df.isnull().sum()

df_2017.head(5)

"""#### **Feature Engineering**"""

df.head(5)

df['total_cost'] = df['order_quantity'] * df['total unit cost']

df['profit'] = df['revenue']-df['total_cost']
df['profit_margin_pct'] = df['profit'] /df['revenue']*100

df.head(5)

"""###**EDA**###"""

df['order_month'] = df['order_date'].dt.to_period('M')
monthly_sales = df.groupby ('order_month') ['revenue']. sum()
plt. figure(figsize=(15,4))
monthly_sales.plot(marker='o', color= 'navy')
from matplotlib.ticker import FuncFormatter
formatter = FuncFormatter (lambda x, pos: f'{x/1e6:.1f}M')
plt.gca().yaxis.set_major_formatter(formatter)

plt.title('Monthly Sales Trend' )
plt.xlabel('Month')
plt.ylabel('Total Revenue (Millions)')

plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming df is your DataFrame
# Convert order_date to datetime
df['order_date'] = pd. to_datetime(df['order_date'])

# Extract year and month for grouping
df ['year_month'] = df['order_date'].dt.to_period('M')

# Aggregate revenue by year_month
monthly_sales = df.groupby ('year_month') ['revenue'].sum().reset_index()

# Convert year_month back to string for plotting
monthly_sales['year_month'] = monthly_sales['year_month'].astype(str)

# Create the line chart
plt.figure(figsize=(10, 6))
sns.lineplot(data=monthly_sales, x='year_month', y='revenue', marker='o')
plt.title('Monthly Sales Revenue', fontsize=14)
plt.xlabel('Month', fontsize=12)
plt.ylabel ('Revenue ($)', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()

#Show the plot
plt.show()

# Assuming df is your DataFrame
# Convert order_date to datetime (if not already)
df['order_date'] = pd.to_datetime(df['order_date'])

# Remove records from January and February 2018
df_new = df[~((df['order_date'].dt.year == 2018) & (df['order_date'].dt.month.isin([1,2])))]

# Assuming df is your DataFrame
# Convert order_date to datetime
df_new['order_date'] = pd. to_datetime(df_new['order_date'])

# Extract month name for grouping
df_new['month'] = df_new['order_date'].dt.strftime('%B')

# Aggregate revenue by month across all years
monthly_trend = df_new.groupby ('month') ['revenue'].sum().reset_index()

# Sort months in calendar order
month_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
monthly_trend['month'] = pd.Categorical(monthly_trend['month'], categories=month_order, ordered=True)
monthly_trend = monthly_trend.sort_values('month')

# Create the line chart
plt.figure(figsize=(10, 6))
sns.lineplot(data=monthly_trend, x='month', y='revenue', marker='o')
plt.title('Overall Monthly Sales Trend (All Years)', fontsize=14)
plt.xlabel ('Month', fontsize=12)
plt.ylabel ('Revenue ($)', fontsize=12)
plt.xticks(rotation=45)
plt. grid(True)
plt.tight_layout()

# Show the plot
plt.show()

# Assuming df is your DataFrame
# Aggregate revenue by product_name
product_revenue = df_new.groupby ('product_name') ['revenue'].sum().reset_index()

# Get top 10 products by revenue
top_10_products = product_revenue.sort_values('revenue', ascending=False).head(10)

# Print data for Chart.js
labels = top_10_products['product_name'].tolist()
data = top_10_products['revenue'].tolist()

print("labels for Chart.js:", labels)
print("data for Chart.js:", data)

# The Charts.js config above should be updated with these labels and data

product_revenue = df_new.groupby('product_name')['revenue'].sum().reset_index()

# Get Top 10 products by revenue
top_10_products = product_revenue.sort_values(by= 'revenue', ascending=False).head(10)

# Create the bar chart
plt.figure(figsize=(10, 6))
sns.barplot(data=top_10_products, x='product_name', y='revenue', palette='tab10')
plt.title('Top 10 Products by Revenue', fontsize=14)
plt.xlabel('Product', fontsize=12)
plt.ylabel('Revenue ($)', fontsize=12)
plt.xticks(rotation=45, ha= 'right')
plt.grid(True, axis= 'y')
plt.tight_layout()

# Show the plot
plt.show()

product_revenue = df.groupby('product_name')['revenue'].sum().reset_index()

# Get Top 10 products by revenue
top_10_products = product_revenue.sort_values(by= 'revenue', ascending=False).head(10)

# Create the bar chart
plt.figure(figsize=(10, 6))
barplot = sns.barplot(data=top_10_products, x='product_name', y='revenue', palette='tab10')

# Add labels on top of each bar
for p in barplot.patches:
    barplot.annotate(f'${p.get_height():,.0f}',
                     (p.get_x() + p.get_width() / 2., p.get_height()),
                     ha= 'center', va= 'bottom', fontsize=10, color= 'black',
                     xytext= (0, 5),textcoords= 'offset points')

plt.title('Top 10 Products by Revenue', fontsize=14)
plt.xlabel('Product', fontsize=12)
plt.ylabel('Revenue ($)', fontsize=12)
plt.xticks(rotation=45, ha= 'right')
plt.grid(True, axis= 'y')
plt.tight_layout()

# Show the plot
plt.show()

product_revenue = df.groupby('product_name')['revenue'].sum().reset_index()

# Get Top 10 products by revenue
bottom_10_products = product_revenue.sort_values(by= 'revenue', ascending=True).head(10)

# Create the bar chart
plt.figure(figsize=(10, 6))
barplot = sns.barplot(data=bottom_10_products, x='product_name', y='revenue', palette='tab10')

# Add labels on top of each bar
for p in barplot.patches:
    barplot.annotate(f'${p.get_height():,.0f}',
                     (p.get_x() + p.get_width() / 2., p.get_height()),
                     ha= 'center', va= 'bottom', fontsize=10, color= 'black',
                     xytext= (0, 5),textcoords= 'offset points')

plt.title('Bottom 10 Products by Revenue', fontsize=14)
plt.xlabel('Product', fontsize=12)
plt.ylabel('Revenue ($)', fontsize=12)
plt.xticks(rotation=45, ha= 'right')
plt.grid(True, axis= 'y')
plt.tight_layout()

# Show the plot
plt.show()

## Sales by Channel

chan_sales = df.groupby('channel')['revenue'].sum().sort_values(ascending=True)

plt.figure(figsize=(5,5))

plt.pie(
    chan_sales.values,
    labels=chan_sales.index,
    autopct= '%1.1f%%',
    colors=sns.color_palette('coolwarm')
)

plt.title('Total Sales by Channel')

plt.tight_layout()

plt.show()

## Average Order Value (AOV) Distribution

aov = df.groupby('order_number')['revenue'].sum()

plt.figure(figsize=(12,4))

plt.hist(
    aov,
    bins=50,
    color='pink',
    edgecolor='black'
)

plt.title('Distribution of Average Order Value')
plt.xlabel('Order Value (USD)')
plt.ylabel('Number of Orders')

plt.tight_layout()

plt.show()

# Unit Price Distribution per Product
# Top 10 States by Revenue and Order Count
# Average Profit Marging by Channel
# Top and Bottom 10 Customers by Revenue
# Customer Segementation: Revenue vs Profit Margin
# Correlation Heatmap

df.head(5)

product_revenue = df.groupby('product_name')['revenue'].sum().reset_index()
top_10_products = product_revenue.sort_values(by= 'revenue', ascending=False).head(10)['product_name'].tolist()

# Filter df to include only top 10 products
df_top_10 = df[df['product_name'].isin(top_10_products)]

# Create the boxplot
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_top_10, x='product_name', y='unit_price', palette='tab10')
plt.title('Unit Price Distribution for Top 10 Products by Revenue', fontsize=14)
plt.xlabel('Product', fontsize=12)
plt.ylabel('Unit Price ($)', fontsize=12)
plt.xticks(rotation=45, ha= 'right')
plt.grid(True, axis= 'y')
plt.tight_layout()

# Show the plot
plt.show()

state_stats = df.groupby('state_name').agg(
    revenue=('revenue', 'sum'),
    order_count=('order_number', 'count')
).reset_index()

# Get top 10 states by revenue
top_10_revenue = state_stats.sort_values(by='revenue', ascending=False).head(10)

# Get top 10 states by order count
top_10_orders = state_stats.sort_values(by='order_count', ascending=False).head(10)

# Create subplots for revenue and order count
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6), sharey=False)

# Bar chart for top 10 states by revenue
barplot1 = sns.barplot(data=top_10_revenue, x='state_name', y='revenue', palette='tab10', ax=ax1)
for p in barplot1.patches:
    barplot1.annotate(f'${p.get_height():,.0f}',
                      (p.get_x() + p.get_width() / 2., p.get_height()),
                      ha= 'center', va= 'bottom', fontsize=10, color= 'black',
                      xytext= (0, 5),textcoords= 'offset points')
ax1.set_title('Top 10 States by Revenue', fontsize=14)
ax1.set_xlabel('State', fontsize=12)
ax1.set_ylabel('Revenue ($)', fontsize=12)
ax1.tick_params(axis='x', rotation=45, labelright=True)
ax1.grid(True, axis= 'y')

# Bar chart for top 10 states by order count
barplot2 = sns.barplot(data=top_10_orders, x='state_name', y='order_count', palette='tab10', ax=ax2)
for p in barplot2.patches:
    barplot2.annotate(f'{int(p.get_height()):,}',
                      (p.get_x() + p.get_width() / 2., p.get_height()),
                      ha= 'center', va= 'bottom', fontsize=10, color= 'black',
                      xytext= (0, 5),textcoords= 'offset points')
ax2.set_title('Top 10 States by Order Count', fontsize=14)
ax2.set_xlabel('State', fontsize=12)
ax2.set_ylabel('Order Count', fontsize=12)
ax2.tick_params(axis='x', rotation=45, labelright=True)
ax2.grid(True, axis= 'y')

# Adjust layout
plt.tight_layout()

# Show plot
plt.show()

# Compute average profit margin percenatge for each channel
channel_margin = (
    df.groupby('channel')['profit_margin_pct']       # Group by channel names
    .mean()                                         # Calculate mean profit margin%
    .sort_values(ascending=False)                    # Sort channels from highest to lowest margin
)

# Set the figure sizr for clarity
plt.figure(figsize=(6,4))

# Plot a bar chart of avrage profit margin by channel
ax = sns.barplot(
    x=channel_margin.index,                                # X-axis: channel names
    y=channel_margin.values,                               # Y-axis: average profit margin values
    palette='coolwarm'                                     # Color palette for bars
)

# Add chart title and axis labels
plt.title('Average Profit Margin by Channel')               # Main title
plt.xlabel('Sales Channel')                                 # X-axis label
plt.ylabel('Avg Profit Margin (%)')                         # Y-axis label

# Annoate each bar with ist exact margin percenatge
for i, v in enumerate(channel_margin.values):
    ax.text(
        i,                                                  # X position (bar index)
        v + 0.5,                                            # Y position (bar height + small offset)
        f"{v:.2f}%",                                        # Text label showing percentage with two decimals
        ha='center',                                        # Center-align the text horizontally
        fontweight='bold'                                   # Bold font for readability
    )

# Adjust layout to prevent clipping and display the plot
plt.tight_layout()
plt.show()

# Calculate total revenue per customer and select top 10
top_rev = (
    df.groupby('customer_name')['revenue']
    .sum()                                        # Sum revenue for each customer
    .sort_values(ascending=False)                 # Sort from highest to lowest
    .head(10)                                     # Keep top 10 customers
)

# Calculate total revenue per customer and slect bottom 10
bottom_rev = (
    df.groupby('customer_name')['revenue']
    .sum()                                        # Sum revenue for each customer
    .sort_values(ascending=True)                  # Sort from lowest to highest
    .head(10)                                     # Keep bottom 10 customers
)

# Create a figure with two side-by-side subplots
fig, axes = plt.subplots(1, 2, figsize=(16, 5))

# Plot 1: Top 10 customers by revenue (converted to millions)
sns.barplot(
    x=top_rev.values/ 1e6,
    y=top_rev.index,                             # X-axis: revenue in millions
    palette='Blues_r',                               # Color palettte (reversed blues)
    ax=axes[0]                                       # Draw on the left subplot
)
axes [0].set_title('Top 10 Customers by Revenue', fontsize=14)                 # Title
axes [0].set_xlabel('Revenue (Million USD)', fontsize=12)                      # X-axis label
axes [0].set_ylabel('Customer Name', fontsize=12)                              # Y-axis label

# Plot 2: Bottom 10 customers by revenue (converted to millions)
sns.barplot(
    x=bottom_rev.values / 1e6,                       # X-axis: revenue in millions
    y=bottom_rev.index,                              # Y-axis: customer names
    palette='Reds',                                  # Color palettte (reds)
    ax=axes[1]                                       # Draw on the right subplot
)
axes [1].set_title('Bottom 10 Customers by Revenue', fontsize=14)                 # Title
axes [1].set_xlabel('Revenue (Million USD)', fontsize=12)                         # X-axis label
axes [1].set_ylabel('Customer Name', fontsize=12)                                 # Y-axis label

# Adjust layout to prevent overlap and dispaly both charts
plt.tight_layout()
plt.show()

# Aggaregate metrics per customer
cust_summary = df.groupby('customer_name').agg(
    total_revenue=('revenue', 'sum'),
    total_profit=('profit', 'sum'),
    avg_margin=('profit_margin_pct', 'mean'),
    orders=('order_number', 'nunique')
)

# Conert revenue to millions
cust_summary['total_revenue_m'] = cust_summary ['total_revenue']/ 1e6

plt.figure(figsize=(7,5))

# Bubble chart with revenue in millions
sns.scatterplot (
    data=cust_summary,
    x='total_revenue_m',                                #<-- use revenue in millions
    y='avg_margin',
    size='orders',
    sizes=(20,200),
    alpha=0.7
)

plt.title('Customer Segmentation: Revenue vs. Profit Margin')
plt.xlabel('Total Revenue (Million USD)')     # <-- update label
plt.ylabel('Avg Profit Margin (%)')

plt.tight_layout
plt.show()

df.columns

# List numeric colums to list in the correlation calculation
num_cols = ['order_quantity', 'unit_price', 'revenue', 'total_cost', 'profit']

# Calculate the correlation matrix for these numeric features
corr = df[num_cols].corr()

# Set the figure sixe for clarity
plt.figure(figsize=(6,4))

# Plot the heatmap with annotations and a viridis colormap
sns.heatmap(
    corr,                                                             # Data: correlation matrix
    annot=True,                                                       # Display correlation coefficients on the heatmap
    fmt=".2f",                                                        # Format numbers to two decimal places
    cmap= 'viridis'                                                   # Color palette for the heatmap
)

# Add title for context
plt.title('Correlation Matrix')

# Adjust layout to prevent clipping
plt.tight_layout()

# Display the heatmap
plt.show()